#!/usr/bin/env python3
"""
Trivy Security Report Generator
Trivy Ïä§Ï∫î Í≤∞Í≥ºÎ•º ÌååÏã±ÌïòÍ≥† AI Í∏∞Î∞ò Ï¢ÖÌï© Î≥¥Ïïà Î≥¥Í≥†ÏÑúÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
"""

import json
import os
import sys
from datetime import datetime
from typing import Dict, List, Optional, Tuple

def parse_sarif_file(file_path: str) -> Dict:
    """SARIF ÌååÏùºÏùÑ ÌååÏã±ÌïòÍ≥† Ï∑®ÏïΩÏ†ê Ï†ïÎ≥¥Î•º Ï∂îÏ∂úÌï©ÎãàÎã§."""
    if not os.path.exists(file_path):
        return {"error": "ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§"}
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        results = []
        severity_counts = {"error": 0, "warning": 0, "note": 0, "none": 0}
        
        for run in data.get("runs", []):
            for result in run.get("results", []):
                severity = result.get("level", "none")
                severity_counts[severity] += 1
                
                results.append({
                    "message": result.get("message", {}).get("text", "ÏÑ§Î™Ö ÏóÜÏùå"),
                    "severity": severity,
                    "location": result.get("locations", [{}])[0].get("physicalLocation", {}).get("artifactLocation", {}).get("uri", "Ïïå Ïàò ÏóÜÏùå"),
                    "rule_id": result.get("ruleId", "Ïïå Ïàò ÏóÜÏùå")
                })
        
        return {
            "total_vulnerabilities": len(results),
            "severity_distribution": severity_counts,
            "all_vulnerabilities": results  # Î™®Îì† Ï∑®ÏïΩÏ†ê Ìè¨Ìï®
        }
    except Exception as e:
        return {"error": f"SARIF ÌååÏùº ÌååÏã± Ïã§Ìå®: {str(e)}"}

def generate_ai_report(trivy_fs_results: Dict, trivy_iac_results: Dict) -> str:
    """AI Í∏∞Î∞ò Î≥¥Ïïà Î≥¥Í≥†ÏÑúÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§."""
    
    # Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
    total_vulns = 0
    total_high = 0
    total_medium = 0
    total_low = 0
    
    # ÌååÏùº ÏãúÏä§ÌÖú Ïä§Ï∫î Í≤∞Í≥º
    if "error" not in trivy_fs_results:
        total_vulns += trivy_fs_results.get("total_vulnerabilities", 0)
        severity_dist = trivy_fs_results.get("severity_distribution", {})
        total_high += severity_dist.get("error", 0)
        total_medium += severity_dist.get("warning", 0)
        total_low += severity_dist.get("note", 0)
    
    # IaC Ïä§Ï∫î Í≤∞Í≥º
    if "error" not in trivy_iac_results:
        total_vulns += trivy_iac_results.get("total_vulnerabilities", 0)
        severity_dist = trivy_iac_results.get("severity_distribution", {})
        total_high += severity_dist.get("error", 0)
        total_medium += severity_dist.get("warning", 0)
        total_low += severity_dist.get("note", 0)
    
    # AI Î∂ÑÏÑù Î∞è Í∂åÏû•ÏÇ¨Ìï≠ ÏÉùÏÑ±
    ai_analysis = generate_ai_analysis(total_high, total_medium, total_low, trivy_fs_results, trivy_iac_results)
    
    report = f"""## ü§ñ AI Î≥¥Ïïà Ïä§Ï∫î Î≥¥Í≥†ÏÑú

---

### üìÖ Ïä§Ï∫î Í∞úÏöî
* **Ïä§Ï∫î ÎÇ†Ïßú**: {datetime.now().strftime('%YÎÖÑ %mÏõî %dÏùº %H:%M:%S')}
* **Î∏åÎûúÏπò**: `{os.environ.get('GITHUB_REF', 'Ïïå Ïàò ÏóÜÏùå')}`
* **Ïª§Î∞ã**: `{os.environ.get('GITHUB_SHA', 'Ïïå Ïàò ÏóÜÏùå')[:8]}`
* **Ï†ÄÏû•ÏÜå**: `{os.environ.get('GITHUB_REPOSITORY', 'Ïïå Ïàò ÏóÜÏùå')}`

---

### üîç Trivy Ïä§Ï∫î Í≤∞Í≥º ÏöîÏïΩ

Ïù¥Î≤à Ïä§Ï∫îÏóêÏÑú Ï¥ù **{total_vulns}Í∞ú**Ïùò Ï∑®ÏïΩÏ†êÏù¥ Î∞úÍ≤¨ÎêòÏóàÏúºÎ©∞, Í∑∏Ï§ë **{total_high}Í∞úÎäî ÎÜíÏùÄ Ïã¨Í∞ÅÎèÑ**Î•º Í∞ÄÏßÑ Í≤ÉÏúºÎ°ú ÎÇòÌÉÄÎÇ¨ÏäµÎãàÎã§.

#### üìä Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ
* **Ï¥ù Ï∑®ÏïΩÏ†ê Ïàò**: {total_vulns}Í∞ú
* **ÎÜíÏùÄ Ïã¨Í∞ÅÎèÑ**: {total_high}Í∞ú
* **Ï§ëÍ∞Ñ Ïã¨Í∞ÅÎèÑ**: {total_medium}Í∞ú
* **ÎÇÆÏùÄ Ïã¨Í∞ÅÎèÑ**: {total_low}Í∞ú

#### üõ†Ô∏è Ïä§Ï∫î ÎèÑÍµ¨Î≥Ñ Í≤∞Í≥º

**1. Trivy ÌååÏùº ÏãúÏä§ÌÖú Ïä§Ï∫î**
"""
    
    if "error" in trivy_fs_results:
        report += f"* **ÏÉÅÌÉú**: ‚ùå {trivy_fs_results['error']}\n"
    else:
        vulns = trivy_fs_results.get("total_vulnerabilities", 0)
        severity_dist = trivy_fs_results.get("severity_distribution", {})
        report += f"* **ÏÉÅÌÉú**: ‚úÖ ÏôÑÎ£å\n"
        report += f"* **Î∞úÍ≤¨Îêú Ï∑®ÏïΩÏ†ê**: {vulns}Í∞ú (ÎÜíÏùå: {severity_dist.get('error', 0)}, Ï§ëÍ∞Ñ: {severity_dist.get('warning', 0)}, ÎÇÆÏùå: {severity_dist.get('note', 0)})\n"
    
    report += "\n**2. Trivy Ïù∏ÌîÑÎùºÏä§Ìä∏Îü≠Ï≤ò ÏΩîÎìú Ïä§Ï∫î**\n"
    
    if "error" in trivy_iac_results:
        report += f"* **ÏÉÅÌÉú**: ‚ùå {trivy_iac_results['error']}\n"
    else:
        vulns = trivy_iac_results.get("total_vulnerabilities", 0)
        severity_dist = trivy_iac_results.get("severity_distribution", {})
        report += f"* **ÏÉÅÌÉú**: ‚úÖ ÏôÑÎ£å\n"
        report += f"* **Î∞úÍ≤¨Îêú Ï∑®ÏïΩÏ†ê**: {vulns}Í∞ú (ÎÜíÏùå: {severity_dist.get('error', 0)}, Ï§ëÍ∞Ñ: {severity_dist.get('warning', 0)}, ÎÇÆÏùå: {severity_dist.get('note', 0)})\n"
    
    # AI Î∂ÑÏÑù Í≤∞Í≥º Ï∂îÍ∞Ä
    report += f"\n---\n\n{ai_analysis}\n"
    
    # Ï†ÑÏ≤¥ ÏÉÅÌÉú
    overall_status = "‚úÖ ÌÜµÍ≥º" if total_high == 0 else "‚ùå Ïã§Ìå®"
    report += f"""
---

### üö® ÏµúÏ¢Ö Î≥¥Ïïà ÏÉÅÌÉú: {overall_status}

Ïù¥Î≤à Î≥¥Ïïà Ïä§Ï∫î Í≤∞Í≥º, ÏãúÏä§ÌÖúÏùò Î≥¥Ïïà ÏÉÅÌÉúÎäî **{'ÏÑ±Í≥µ' if total_high == 0 else 'Ïã§Ìå®'}**Î°ú ÌåêÎã®Îê©ÎãàÎã§. {'Î∞úÍ≤¨Îêú CRITICAL Î∞è HIGH Ïã¨Í∞ÅÎèÑ Ï∑®ÏïΩÏ†êÎì§ÏùÑ ÏãúÍ∏âÌûà Ìï¥Í≤∞ÌïòÏó¨ Î≥¥Ïïà ÏúÑÌóòÏùÑ ÎÇÆÏ∂∞Ïïº Ìï©ÎãàÎã§.' if total_high > 0 else 'ÌòÑÏû¨ Î≥¥Ïïà ÏÉÅÌÉúÎäî ÏñëÌò∏Ìï©ÎãàÎã§.'}

---

### üìä Í≤∞Í≥º ÏúÑÏπò Î∞è Îã§Ïùå Îã®Í≥Ñ

* **GitHub Security ÌÉ≠**: ÏÉÅÏÑ∏ Ï∑®ÏïΩÏ†ê Î≥¥Í≥†ÏÑúÎ•º ÌôïÏù∏ÌïòÍ≥†, GitHubÏùò Î≥¥Ïïà Í∏∞Îä•ÏùÑ ÌôúÏö©ÌïòÏó¨ Ï∑®ÏïΩÏ†êÏùÑ Ï∂îÏ†ÅÌïòÍ≥† Í¥ÄÎ¶¨Ìï† Ïàò ÏûàÏäµÎãàÎã§.
* **SARIF ÌååÏùº**: Ïô∏Î∂Ä Î∂ÑÏÑù ÎèÑÍµ¨ÏóêÏÑú ÌôúÏö©Ìï† Ïàò ÏûàÎèÑÎ°ù SARIF ÌååÏùºÏùÑ Îã§Ïö¥Î°úÎìúÌïòÏÑ∏Ïöî.
* **ÏïÑÌã∞Ìå©Ìä∏**: ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏïÑÌã∞Ìå©Ìä∏ÏóêÏÑú ÏÉÅÏÑ∏ Î≥¥Í≥†ÏÑúÎ•º ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.

**Îã§Ïùå Îã®Í≥Ñ:**
1. GitHub Security ÌÉ≠ÏóêÏÑú Î™®Îì† Í≤∞Í≥ºÎ•º Î©¥Î∞ÄÌûà Í≤ÄÌÜ†ÌïòÏÑ∏Ïöî.
2. Í∞ÄÏû• Ï§ëÏöîÌïòÍ±∞ÎÇò ÎÜíÏùÄ Ïã¨Í∞ÅÎèÑÏùò Î¨∏Ï†úÎ∂ÄÌÑ∞ Ìï¥Í≤∞ ÏûëÏóÖÏùÑ ÏãúÏûëÌïòÏÑ∏Ïöî.
3. ÌååÏùº ÏãúÏä§ÌÖú Ï∑®ÏïΩÏ†êÏùò Í≤ΩÏö∞, Í¥ÄÎ†®Îêú ÏùòÏ°¥ÏÑ± Ìå®ÌÇ§ÏßÄÎ•º ÏµúÏã† Î≥¥Ïïà Ìå®ÏπòÍ∞Ä Ï†ÅÏö©Îêú Î≤ÑÏ†ÑÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ÌïòÏÑ∏Ïöî.
4. Ïù∏ÌîÑÎùºÏä§Ìä∏Îü≠Ï≤ò ÏΩîÎìú Ï∑®ÏïΩÏ†êÏùò Í≤ΩÏö∞, Terraform ÏÑ§Ï†ïÏùÑ Î≥¥Ïïà Í∂åÏû•ÏÇ¨Ìï≠Ïóê Îî∞Îùº ÏàòÏ†ïÌïòÍ≥† Ïû¨Î∞∞Ìè¨ÌïòÏÑ∏Ïöî.

---
*Ïù¥ Î≥¥Í≥†ÏÑúÎäî Trivy Î≥¥Ïïà Ïä§Ï∫î ÌååÏù¥ÌîÑÎùºÏù∏Ïóê ÏùòÌï¥ ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.*

Ï∂îÍ∞ÄÏ†ÅÏúºÎ°ú Í∂ÅÍ∏àÌïú Ï†êÏù¥ÎÇò ÌäπÏ†ï Ï∑®ÏïΩÏ†êÏóê ÎåÄÌïú ÏûêÏÑ∏Ìïú Ï†ïÎ≥¥Í∞Ä ÌïÑÏöîÌïòÏãúÎ©¥ Ïñ∏Ï†úÎì†ÏßÄ Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî.
"""

    return report

def generate_ai_analysis(high_count: int, medium_count: int, low_count: int, 
                        trivy_fs: Dict, trivy_iac: Dict) -> str:
    """AI Í∏∞Î∞ò Î≥¥Ïïà Î∂ÑÏÑù Î∞è Í∂åÏû•ÏÇ¨Ìï≠ÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§."""
    
    analysis = ""
    
    # Ï†ÑÏ≤¥ ÏúÑÌóòÎèÑ ÌèâÍ∞Ä
    if high_count == 0 and medium_count == 0:
        analysis += "#### üü¢ ÌòÑÏû¨ Î≥¥Ïïà ÏÉÅÌÉú: ÏñëÌò∏\n"
        analysis += "ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏Ïùò Î≥¥Ïïà ÏÉÅÌÉúÎäî ÏñëÌò∏Ìï©ÎãàÎã§. Î∞úÍ≤¨Îêú Ï∑®ÏïΩÏ†êÏù¥ ÏóÜÍ±∞ÎÇò Î™®Îëê ÎÇÆÏùÄ Ïã¨Í∞ÅÎèÑÏûÖÎãàÎã§.\n\n"
    elif high_count > 0:
        analysis += f"#### üî¥ ÌòÑÏû¨ Î≥¥Ïïà ÏÉÅÌÉú: ÏúÑÌóò\n"
        analysis += f"**{high_count}Í∞úÏùò ÎÜíÏùÄ Ïã¨Í∞ÅÎèÑ Ï∑®ÏïΩÏ†ê**Ïù¥ Î∞úÍ≤¨ÎêòÏñ¥ **Ï¶âÍ∞ÅÏ†ÅÏù∏ Ï°∞Ïπò**Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§.\n\n"
    elif medium_count > 0:
        analysis += f"#### üü° ÌòÑÏû¨ Î≥¥Ïïà ÏÉÅÌÉú: Ï£ºÏùò\n"
        analysis += f"**{medium_count}Í∞úÏùò Ï§ëÍ∞Ñ Ïã¨Í∞ÅÎèÑ Ï∑®ÏïΩÏ†ê**Ïù¥ Î∞úÍ≤¨ÎêòÏñ¥ Ïö∞ÏÑ†ÏàúÏúÑÎ•º Ï†ïÌï¥ Ìï¥Í≤∞Ìï¥Ïïº Ìï©ÎãàÎã§.\n\n"
    
    analysis += "---\n\n"
    
    # ÌååÏùº ÏãúÏä§ÌÖú Ïä§Ï∫î Î∂ÑÏÑù - Î™®Îì† Ï∑®ÏïΩÏ†ê Ìè¨Ìï®
    if "error" not in trivy_fs and trivy_fs.get("total_vulnerabilities", 0) > 0:
        analysis += "#### üìÅ ÌååÏùº ÏãúÏä§ÌÖú Ï∑®ÏïΩÏ†ê ÏÉÅÏÑ∏ Î∂ÑÏÑù (Ï¥ù {}Í∞ú)\n\n".format(trivy_fs.get("total_vulnerabilities", 0))
        
        # ÌååÏùºÎ≥Ñ Ï∑®ÏïΩÏ†ê Í∑∏Î£πÌôî
        file_vulns = {}
        for vuln in trivy_fs.get("all_vulnerabilities", []):
            file_path = vuln['location']
            if file_path not in file_vulns:
                file_vulns[file_path] = []
            file_vulns[file_path].append(vuln)
        
        # Ï£ºÏöî ÌååÏùº Î∂ÑÏÑù
        if file_vulns:
            main_files = list(file_vulns.keys())[:3]  # ÏÉÅÏúÑ 3Í∞ú ÌååÏùºÎßå ÌëúÏãú
            analysis += "Ï£ºÎ°ú `{}` ÌååÏùºÏóêÏÑú Í¥ÄÎ†® Ï∑®ÏïΩÏ†êÏù¥ Îã§Ïàò Î∞úÍ≤¨ÎêòÏóàÏäµÎãàÎã§.\n\n".format(main_files[0] if main_files else "Ïïå Ïàò ÏóÜÏùå")
        
        # Ïã¨Í∞ÅÎèÑÎ≥Ñ Î∂ÑÎ•ò
        high_vulns = [v for v in trivy_fs.get("all_vulnerabilities", []) if v['severity'] == 'error']
        medium_vulns = [v for v in trivy_fs.get("all_vulnerabilities", []) if v['severity'] == 'warning']
        low_vulns = [v for v in trivy_fs.get("all_vulnerabilities", []) if v['severity'] == 'note']
        
        if high_vulns:
            analysis += "* **ÎÜíÏùå ({}Í∞ú)**\n".format(len(high_vulns))
            for i, vuln in enumerate(high_vulns[:5], 1):  # ÏÉÅÏúÑ 5Í∞úÎßå ÌëúÏãú
                analysis += f"    * **{vuln['rule_id']}**: {vuln['message']}\n"
            if len(high_vulns) > 5:
                analysis += f"    * ... Î∞è {len(high_vulns) - 5}Í∞ú Îçî\n"
            analysis += "\n"
        
        if medium_vulns:
            analysis += "* **Ï§ëÍ∞Ñ ({}Í∞ú)**\n".format(len(medium_vulns))
            for i, vuln in enumerate(medium_vulns[:5], 1):  # ÏÉÅÏúÑ 5Í∞úÎßå ÌëúÏãú
                analysis += f"    * **{vuln['rule_id']}**: {vuln['message']}\n"
            if len(medium_vulns) > 5:
                analysis += f"    * ... Î∞è {len(medium_vulns) - 5}Í∞ú Îçî\n"
            analysis += "\n"
        
        if low_vulns:
            analysis += "* **ÎÇÆÏùå ({}Í∞ú)**\n".format(len(low_vulns))
            for i, vuln in enumerate(low_vulns[:3], 1):  # ÏÉÅÏúÑ 3Í∞úÎßå ÌëúÏãú
                analysis += f"    * **{vuln['rule_id']}**: {vuln['message']}\n"
            if len(low_vulns) > 3:
                analysis += f"    * ... Î∞è {len(low_vulns) - 3}Í∞ú Îçî\n"
            analysis += "\n"
        
        analysis += "**Í∂åÏû•ÏÇ¨Ìï≠:**\n"
        analysis += "* Í¥ÄÎ†®Îêú **Î™®Îì† Ï∑®ÏïΩ Ìå®ÌÇ§ÏßÄÎ•º ÏµúÏã† Î≤ÑÏ†ÑÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏**ÌïòÏÑ∏Ïöî.\n"
        analysis += "* Îçî Ïù¥ÏÉÅ ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÍ±∞ÎÇò, ÏïåÎ†§ÏßÑ Ï∑®ÏïΩÏ†êÏù¥ ÏßÄÏÜçÏ†ÅÏúºÎ°ú Î∞úÏÉùÌïòÎäî ÎùºÏù¥Î∏åÎü¨Î¶¨Îäî **ÎåÄÏ≤¥Ïû¨Î•º Í≤ÄÌÜ†**Ìï¥ Î≥¥ÏÑ∏Ïöî.\n"
        analysis += "* **Ï†ïÍ∏∞Ï†ÅÏù∏ Î≥¥Ïïà ÏóÖÎç∞Ïù¥Ìä∏ ÏùºÏ†ïÏùÑ ÏàòÎ¶Ω**ÌïòÍ≥†, Ìå®ÌÇ§ÏßÄ Í¥ÄÎ¶¨ Ï†ïÏ±ÖÏùÑ Ï†ÅÏö©ÌïòÏó¨ ÏùòÏ°¥ÏÑ± Ï∑®ÏïΩÏ†êÏùÑ ÏÇ¨Ï†ÑÏóê Î∞©ÏßÄÌïòÎäî Í≤ÉÏù¥ Ï§ëÏöîÌï©ÎãàÎã§.\n\n"
    
    # IaC Ïä§Ï∫î Î∂ÑÏÑù - Î™®Îì† Ï∑®ÏïΩÏ†ê Ìè¨Ìï®
    if "error" not in trivy_iac and trivy_iac.get("total_vulnerabilities", 0) > 0:
        analysis += "#### üèóÔ∏è Ïù∏ÌîÑÎùºÏä§Ìä∏Îü≠Ï≤ò ÏΩîÎìú Ï∑®ÏïΩÏ†ê ÏÉÅÏÑ∏ Î∂ÑÏÑù (Ï¥ù {}Í∞ú)\n\n".format(trivy_iac.get("total_vulnerabilities", 0))
        
        # ÌååÏùºÎ≥Ñ Ï∑®ÏïΩÏ†ê Í∑∏Î£πÌôî
        file_vulns = {}
        for vuln in trivy_iac.get("all_vulnerabilities", []):
            file_path = vuln['location']
            if file_path not in file_vulns:
                file_vulns[file_path] = []
            file_vulns[file_path].append(vuln)
        
        # Ï£ºÏöî ÌååÏùº Î∂ÑÏÑù
        if file_vulns:
            main_files = list(file_vulns.keys())[:3]  # ÏÉÅÏúÑ 3Í∞ú ÌååÏùºÎßå ÌëúÏãú
            analysis += "`{}` ÌååÏùºÏóêÏÑú Ïù∏ÌîÑÎùº ÏÑ§Ï†ïÍ≥º Í¥ÄÎ†®Îêú Îã§ÏàòÏùò Î≥¥Ïïà Ï∑®ÏïΩÏ†êÏù¥ Î∞úÍ≤¨ÎêòÏóàÏäµÎãàÎã§. ".format(main_files[0] if main_files else "Ïïå Ïàò ÏóÜÏùå")
            analysis += "ÌäπÌûà, ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ëÍ∑º Ï†úÏñ¥ Î∞è Îç∞Ïù¥ÌÑ∞ ÏïîÌò∏ÌôîÏóê ÎåÄÌïú Î¨∏Ï†úÍ∞Ä ÎßéÏäµÎãàÎã§.\n\n"
        
        # Ïã¨Í∞ÅÎèÑÎ≥Ñ Î∂ÑÎ•ò
        high_vulns = [v for v in trivy_iac.get("all_vulnerabilities", []) if v['severity'] == 'error']
        medium_vulns = [v for v in trivy_iac.get("all_vulnerabilities", []) if v['severity'] == 'warning']
        low_vulns = [v for v in trivy_iac.get("all_vulnerabilities", []) if v['severity'] == 'note']
        
        if high_vulns:
            analysis += "* **ÎÜíÏùå ({}Í∞ú)**\n".format(len(high_vulns))
            for i, vuln in enumerate(high_vulns[:8], 1):  # ÏÉÅÏúÑ 8Í∞úÎßå ÌëúÏãú
                analysis += f"    * **{vuln['rule_id']}**: {vuln['message']}\n"
            if len(high_vulns) > 8:
                analysis += f"    * ... Î∞è {len(high_vulns) - 8}Í∞ú Îçî\n"
            analysis += "\n"
        
        if medium_vulns:
            analysis += "* **Ï§ëÍ∞Ñ ({}Í∞ú)**\n".format(len(medium_vulns))
            for i, vuln in enumerate(medium_vulns[:5], 1):  # ÏÉÅÏúÑ 5Í∞úÎßå ÌëúÏãú
                analysis += f"    * **{vuln['rule_id']}**: {vuln['message']}\n"
            if len(medium_vulns) > 5:
                analysis += f"    * ... Î∞è {len(medium_vulns) - 5}Í∞ú Îçî\n"
            analysis += "\n"
        
        if low_vulns:
            analysis += "* **ÎÇÆÏùå ({}Í∞ú)**\n".format(len(low_vulns))
            for i, vuln in enumerate(low_vulns[:5], 1):  # ÏÉÅÏúÑ 5Í∞úÎßå ÌëúÏãú
                analysis += f"    * **{vuln['rule_id']}**: {vuln['message']}\n"
            if len(low_vulns) > 5:
                analysis += f"    * ... Î∞è {len(low_vulns) - 5}Í∞ú Îçî\n"
            analysis += "\n"
        
        analysis += "**Í∂åÏû•ÏÇ¨Ìï≠:**\n"
        analysis += "* **Terraform ÏÑ§Ï†ïÏóêÏÑú Î≥¥Ïïà Î™®Î≤î ÏÇ¨Î°ÄÎ•º Ï†ÅÍ∑πÏ†ÅÏúºÎ°ú Ï†ÅÏö©**ÌïòÏÑ∏Ïöî.\n"
        analysis += "* **ÎØºÍ∞êÌïú Ï†ïÎ≥¥Í∞Ä ÌïòÎìúÏΩîÎî©ÎêòÏßÄ ÏïäÎèÑÎ°ù ÌôïÏù∏**ÌïòÍ≥†, AWS Secrets Manager Îì± ÏïàÏ†ÑÌïú ÏÑúÎπÑÏä§Î°ú Í¥ÄÎ¶¨ÌïòÏÑ∏Ïöî.\n"
        analysis += "* **ÏµúÏÜå Í∂åÌïú ÏõêÏπô**Ïóê Îî∞Îùº Î¶¨ÏÜåÏä§ Ï†ëÍ∑º Í∂åÌïúÏùÑ ÏÑ§Ï†ïÌïòÍ≥†, Î∂àÌïÑÏöîÌïòÍ≤å ÎÑìÏùÄ Ï†ëÍ∑º Í∂åÌïú(Ïòà: 0.0.0.0/0)ÏùÑ Ï†úÌïúÌïòÏÑ∏Ïöî.\n"
        analysis += "* **Ïù∏ÌîÑÎùº ÏΩîÎìú Î¶¨Î∑∞ ÌîÑÎ°úÏÑ∏Ïä§Î•º Í∞ïÌôî**ÌïòÏó¨ Î∞∞Ìè¨ Ï†Ñ Î≥¥Ïïà Ï∑®ÏïΩÏ†êÏùÑ ÎØ∏Î¶¨ Î∞úÍ≤¨ÌïòÍ≥† ÏàòÏ†ïÌï† Ïàò ÏûàÎèÑÎ°ù Ìï©ÎãàÎã§.\n\n"
    
    # ÏùºÎ∞òÏ†ÅÏù∏ Î≥¥Ïïà Í∂åÏû•ÏÇ¨Ìï≠
    analysis += "### üõ°Ô∏è ÏùºÎ∞ò Î≥¥Ïïà Í∂åÏû•ÏÇ¨Ìï≠\n\n"
    if high_count > 0:
        analysis += f"1. **Ï¶âÏãú Ï°∞Ïπò**: Î∞úÍ≤¨Îêú **ÎÜíÏùÄ Ïã¨Í∞ÅÎèÑ Ï∑®ÏïΩÏ†ê(Ï¥ù {high_count}Í∞ú)**ÏùÑ Ïö∞ÏÑ†Ï†ÅÏúºÎ°ú Ìï¥Í≤∞Ìï¥Ïïº Ìï©ÎãàÎã§.\n"
    if medium_count > 0:
        analysis += f"2. **Í≥ÑÌöçÏ†Å Ï°∞Ïπò**: Ï§ëÍ∞Ñ Ïã¨Í∞ÅÎèÑ Ï∑®ÏïΩÏ†êÏóê ÎåÄÌïú Ìï¥Í≤∞ Í≥ÑÌöçÏùÑ ÏàòÎ¶ΩÌïòÍ≥† ÏàúÏ∞®Ï†ÅÏúºÎ°ú Ï°∞ÏπòÌïòÏÑ∏Ïöî.\n"
    analysis += "3. **Ï†ïÍ∏∞ Î™®ÎãàÌÑ∞ÎßÅ**: ÏûêÎèôÌôîÎêú Î≥¥Ïïà Ïä§Ï∫îÏùÑ CI/CD ÌååÏù¥ÌîÑÎùºÏù∏Ïóê ÌÜµÌï©ÌïòÏó¨ ÏßÄÏÜçÏ†ÅÏúºÎ°ú Î≥¥Ïïà ÏÉÅÌÉúÎ•º Î™®ÎãàÌÑ∞ÎßÅÌïòÏÑ∏Ïöî.\n"
    analysis += "4. **ÌåÄ ÍµêÏú°**: Î≥¥Ïïà Î™®Î≤î ÏÇ¨Î°Ä Î∞è ÏµúÏã† ÏúÑÌòë ÎèôÌñ•Ïóê ÎåÄÌï¥ ÌåÄÏõêÎì§ÏùÑ ÍµêÏú°ÌïòÏó¨ Î≥¥Ïïà Ïù∏ÏãùÏùÑ ÎÜíÏù¥ÏÑ∏Ïöî.\n"
    analysis += "5. **Î¨∏ÏÑúÌôî**: Ï°∞ÏßÅÏùò Î≥¥Ïïà Ï†ïÏ±Ö Î∞è Ï†àÏ∞®Î•º Î™ÖÌôïÌûà Î¨∏ÏÑúÌôîÌïòÏó¨ ÏùºÍ¥ÄÎêú Î≥¥Ïïà Í¥ÄÎ¶¨Î•º Ïú†ÏßÄÌïòÏÑ∏Ïöî.\n\n"
    
    return analysis

def main():
    """Î≥¥Ïïà Î≥¥Í≥†ÏÑú ÏÉùÏÑ±ÏùÑ ÏúÑÌïú Î©îÏù∏ Ìï®ÏàòÏûÖÎãàÎã§."""
    print("üîç Trivy Î≥¥Ïïà Ïä§Ï∫î Í≤∞Í≥ºÎ•º Î∂ÑÏÑùÌïòÍ≥† AI Î≥¥Í≥†ÏÑúÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§...")
    
    # Trivy Ïä§Ï∫î Í≤∞Í≥º ÌååÏã±
    trivy_fs_results = parse_sarif_file("trivy-results.sarif")
    trivy_iac_results = parse_sarif_file("trivy-iac-results.sarif")
    
    # AI Í∏∞Î∞ò Î≥¥Í≥†ÏÑú ÏÉùÏÑ±
    report_content = generate_ai_report(trivy_fs_results, trivy_iac_results)
    
    # Î≥¥Í≥†ÏÑú ÌååÏùºÏóê Ï†ÄÏû•
    output_file = "trivy-security-report.md"
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(report_content)
    
    # ÌÜµÍ≥Ñ Ï∂úÎ†•
    total_vulns = 0
    if "error" not in trivy_fs_results:
        total_vulns += trivy_fs_results.get("total_vulnerabilities", 0)
    if "error" not in trivy_iac_results:
        total_vulns += trivy_iac_results.get("total_vulnerabilities", 0)
    
    print(f"‚úÖ AI Î≥¥Ïïà Î≥¥Í≥†ÏÑú ÏÉùÏÑ± ÏôÑÎ£å: {output_file}")
    print(f"üìä Î∞úÍ≤¨Îêú Ï¥ù Ï∑®ÏïΩÏ†ê: {total_vulns}Í∞ú")
    
    if total_vulns == 0:
        print("üéâ Î≥¥Ïïà Ïä§Ï∫î Í≤∞Í≥º: Ï∑®ÏïΩÏ†êÏù¥ Î∞úÍ≤¨ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§!")
    else:
        print("‚ö†Ô∏è  Î∞úÍ≤¨Îêú Ï∑®ÏïΩÏ†êÏùÑ Í≤ÄÌÜ†ÌïòÍ≥† Ï°∞ÏπòÌïòÏãúÍ∏∞ Î∞îÎûçÎãàÎã§.")

if __name__ == "__main__":
    main() 