name: Security Scan with Trivy

permissions:
  contents: read
  security-events: write

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  AWS_REGION: 'ap-northeast-2'
  TF_VERSION: '1.5.0'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Upload Trivy results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trivy-results
        path: trivy-results.sarif

    - name: Generate Trivy Summary
      if: always()
      run: |
        echo "## 🔍 Trivy File System Scan Results" >> $GITHUB_STEP_SUMMARY
        if [ -f trivy-results.sarif ]; then
          echo "✅ Scan completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "📁 Results uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Scan failed or no results generated" >> $GITHUB_STEP_SUMMARY
        fi

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run Safety check for Python dependencies
      run: |
        safety check --output json > safety-report.json || true
        safety check --full-report || true

    - name: Upload Safety results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: safety-results
        path: safety-report.json

    - name: Run Bandit security linter
      run: |
        bandit -r ansible/roles/flask/files/ -f json -o bandit-report.json || true
        bandit -r ansible/roles/flask/files/ -f txt

    - name: Upload Bandit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bandit-results
        path: bandit-report.json

    - name: Generate Dependency Check Summary
      if: always()
      run: |
        echo "## 🐍 Python Security Check Results" >> $GITHUB_STEP_SUMMARY
        echo "### Safety Check:" >> $GITHUB_STEP_SUMMARY
        if [ -f safety-report.json ]; then
          echo "✅ Safety check completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Safety check failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### Bandit Analysis:" >> $GITHUB_STEP_SUMMARY
        if [ -f bandit-report.json ]; then
          echo "✅ Bandit analysis completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Bandit analysis failed" >> $GITHUB_STEP_SUMMARY
        fi

  terraform-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Run Trivy for Infrastructure as Code
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'terraform/'
        format: 'sarif'
        output: 'trivy-iac-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy IaC results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trivy-iac-results
        path: trivy-iac-results.sarif

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: terraform/
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif
        soft_fail: true

    - name: Upload Checkov results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: checkov-results
        path: checkov-results.sarif

    - name: Generate Infrastructure Security Summary
      if: always()
      run: |
        echo "## 🏗️ Infrastructure Security Check Results" >> $GITHUB_STEP_SUMMARY
        echo "### Trivy IaC Scan:" >> $GITHUB_STEP_SUMMARY
        if [ -f trivy-iac-results.sarif ]; then
          echo "✅ Trivy IaC scan completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Trivy IaC scan failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### Checkov Analysis:" >> $GITHUB_STEP_SUMMARY
        if [ -f checkov-results.sarif ]; then
          echo "✅ Checkov analysis completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Checkov analysis failed" >> $GITHUB_STEP_SUMMARY
        fi

  compliance-check:
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-check, terraform-security]
    if: always()
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Download Trivy results
      uses: actions/download-artifact@v4
      with:
        name: trivy-results
        path: .

    - name: Download Trivy IaC results
      uses: actions/download-artifact@v4
      with:
        name: trivy-iac-results
        path: .

    - name: Download Safety results
      uses: actions/download-artifact@v4
      with:
        name: safety-results
        path: .

    - name: Download Bandit results
      uses: actions/download-artifact@v4
      with:
        name: bandit-results
        path: .

    - name: Download Checkov results
      uses: actions/download-artifact@v4
      with:
        name: checkov-results
        path: .

    - name: Generate Dynamic Security Report
      run: |
        pip install -r requirements.txt
        python3 generate_security_report.py

    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          
          // Check if all jobs succeeded
          const allJobsSucceeded = context.payload.workflow_run?.conclusion === 'success';
          const status = allJobsSucceeded ? '✅' : '❌';
          const statusText = allJobsSucceeded ? 'PASSED' : 'FAILED';
          
          const comment = `${status} **Security Scan ${statusText}**\n\n${report}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Generate Final Summary
      run: |
        echo "## 🛡️ Security Scan Complete" >> $GITHUB_STEP_SUMMARY
        echo "### Overall Status: ${{ needs.security-scan.result == 'success' && needs.dependency-check.result == 'success' && needs.terraform-security.result == 'success' && '✅ PASSED' || '❌ FAILED' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Job Results:" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Terraform Security: ${{ needs.terraform-security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Reports Available:" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub Security Tab" >> $GITHUB_STEP_SUMMARY
        echo "- Workflow Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Pull Request Comments (if applicable)" >> $GITHUB_STEP_SUMMARY 