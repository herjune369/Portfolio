name: Trivy Security Scan with AI Report

permissions:
  contents: read
  security-events: write

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  AWS_REGION: 'ap-northeast-2'
  TF_VERSION: '1.5.0'

jobs:
  trivy-security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner (File System)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Upload Trivy FS results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trivy-fs-results
        path: trivy-results.sarif

    - name: Generate Trivy FS Summary
      if: always()
      run: |
        echo "## 🔍 Trivy File System Scan Results" >> $GITHUB_STEP_SUMMARY
        if [ -f trivy-results.sarif ]; then
          echo "✅ File system scan completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "📁 Results uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ File system scan failed or no results generated" >> $GITHUB_STEP_SUMMARY
        fi

  trivy-iac-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Run Trivy for Infrastructure as Code
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'terraform/'
        format: 'sarif'
        output: 'trivy-iac-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW'

    - name: Upload Trivy IaC results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trivy-iac-results
        path: trivy-iac-results.sarif

    - name: Generate Trivy IaC Summary
      if: always()
      run: |
        echo "## 🏗️ Trivy Infrastructure as Code Scan Results" >> $GITHUB_STEP_SUMMARY
        if [ -f trivy-iac-results.sarif ]; then
          echo "✅ IaC scan completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ IaC scan failed or no results generated" >> $GITHUB_STEP_SUMMARY
        fi

  ai-security-report:
    runs-on: ubuntu-latest
    needs: [trivy-security-scan, trivy-iac-scan]
    if: always()
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Download Trivy FS results
      uses: actions/download-artifact@v4
      with:
        name: trivy-fs-results
        path: .

    - name: Download Trivy IaC results
      uses: actions/download-artifact@v4
      with:
        name: trivy-iac-results
        path: .

    - name: Generate AI Security Report
      run: |
        python3 generate_security_report.py

    - name: Upload AI Security Report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-ai-security-report
        path: trivy-security-report.md

    - name: Comment on PR with AI Report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let report = '';
          
          try {
            report = fs.readFileSync('trivy-security-report.md', 'utf8');
          } catch (error) {
            report = '## 🤖 AI Security Report\n\n❌ Report generation failed. Please check the workflow logs for details.';
          }
          
          // Check if all jobs succeeded
          const allJobsSucceeded = context.payload.workflow_run?.conclusion === 'success';
          const status = allJobsSucceeded ? '✅' : '❌';
          const statusText = allJobsSucceeded ? 'PASSED' : 'FAILED';
          
          const comment = `${status} **Trivy AI Security Scan ${statusText}**\n\n${report}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Generate Final AI Summary
      run: |
        echo "## 🤖 AI Security Scan Complete" >> $GITHUB_STEP_SUMMARY
        echo "### Overall Status: ${{ needs.trivy-security-scan.result == 'success' && needs.trivy-iac-scan.result == 'success' && '✅ PASSED' || '❌ FAILED' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Job Results:" >> $GITHUB_STEP_SUMMARY
        echo "- Trivy File System Scan: ${{ needs.trivy-security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Trivy IaC Scan: ${{ needs.trivy-iac-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Reports Available:" >> $GITHUB_STEP_SUMMARY
        echo "- 🤖 AI Security Report (trivy-security-report.md)" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub Security Tab" >> $GITHUB_STEP_SUMMARY
        echo "- Workflow Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Pull Request Comments (if applicable)" >> $GITHUB_STEP_SUMMARY 